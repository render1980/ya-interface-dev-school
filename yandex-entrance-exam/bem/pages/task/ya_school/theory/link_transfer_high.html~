<!doctype html>
<html class="b-page">
<head>
	<meta charset="UTF-8">
	<title>Что происходит при клике на ссылку (высокий уровень детализации)</title>
	<link rel="stylesheet" type="text/css" href="../../../index/index.css">
	<script type="text/javascript" src="../../../all/all.js"></script>	 
</head>
<body class="b-page">	
	<div class="b-wrapper">
		<div class="b-header">
			<div class="b-header__logo">
				<h1>YA_DEV</h1>
			</div>
		</div>

		<div class="b-nav">
			<ul class="b-top_menu">
				<li  class="b-top_menu__item ">
					<a href="../../../index/index.html" class="b-top_menu__item_color_white b-top_menu__item_decoration_none">Главная</a>
				</li>
				<li  class="b-top_menu__item">
					<a href="../../../task/task.html" class="b-top_menu__item_color_white b-top_menu__item_decoration_none">Проекты</a>
				</li>
				<li  class="b-top_menu__item">
					<a href="../../../site/site.html" class="b-top_menu__item_color_white b-top_menu__item_decoration_none">О сайте</a>
				</li>
				<li class="b-top_menu__item">
					<a href="../../../author/author.html" class="b-top_menu__item_color_white b-top_menu__item_decoration_none">Об авторе</a>
				</li>
			</ul>
		</div>

		<div class="b-main">
			<div class="b-main__article">
			<h3>Что происходит при клике на ссылку (высокий уровень детализации)</h3>
				<p>Можно схематично представить основные компоненты браузера:</p>
				<p><img src="img/browser_components.png"></p>

				<p>Далее постараюсь наиболее подробно описать процесс, начиная от клика по ссылке yandex (например, со страницы с результатами поиска в гугле по слову "yandex" ) и заканчивая отрисовкой страницы на экране.</p>
				
				<ol>
					<li>Клик по ссылке инициирует событие, которое принимается движком браузера и делегируется графическому движку</li>
					<li>Графический движок подгружает html-парсер, который получает значение атрибута href дескриптора &lta&gt, извлекая данные из структуры DOM-дерева страницы, полученного после синтаксического анализа html-кода.
						<ul>
							<li>Дескриптор &lta&gt и его атрибут href привязаны к объектам в DOM-дереве, построенным на этапе загрузки страницы</li>
							<li>После парсинга производится обращение к runtime-instance объекту (структура/класс), описывающей аттрибут href и оттуда извлекается значение</li>
							<li>Необходимые для операции данные сохраняются на время сеанса или кэшируются</li>
						</ul>
					</li>
					<li>Производится поиск запрашиваемой страницы в кэше, или, если не нашлось, то в HOST (C:\WINDOWS\system32\drivers\etc\hosts)</li>
					<li>Далее в дело вступает компонент, реализующий функции для работы с сетью. Он же осущестляет и кэширование полученных данных.</li>
					<li>Если поиск не дал результатов, запрашивается ip-адрес у ближайшего DNS веб-сервера.</li>
					<li>Формируется структура сокета: ip + порт</li>
					<li>Производится соединение с сервером при использовании сокета (минуя промежуточные сервера)</li>
					<li>Если сервер доступен, то формируется http-сообщение с заголовком вида (взято из профайлера браузера Mozilla):</li>
					<p>
						<div class="b-code">
						<pre>
GET / HTTP/1.1                           
Host: www.yandex.ru				  
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 
Accept-Language: ru-ru,ru;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive
Referrer: [адрес, откуда осуществлен переход (если таковой имеется)]
Cookie: (если используются)
						</pre>						
						</div>
					</p>	
					<li> Далее браузер слушает порт 80.</li>
					<li>Если сообщение получено и код = 200 (ответ получен), то производится парсинг содержимого (html-парсер)</li>
					<li>Ответ от сервера обычно присылается с заголовком такого вида:</li>
					<p>
						<div class="b-code">
						<pre>
HTTP/1.1 200 Ok
Via: 1.1 CERBERUS
Connection: Keep-Alive
Proxy-Connection: Keep-Alive
Content-Length: 96770
Expires: Mon, 03 Sep 2012 11:28:47 GMT
Date: Mon, 03 Sep 2012 11:28:47 GMT
Content-Type: text/html; charset=UTF-8
Server: nginx
Cache-Control: no-cache,no-store,max-age=0,must-revalidate
Last-Modified: Mon, 03 Sep 2012 11:28:47 GMT
P3P: policyref="/w3c/p3p.xml", CP="NON DSP ADM DEV PSD IVDo OUR IND STP PHY PRE NAV UNI"
Set-Cookie: t=p; Domain=.yandex.ru; Path=/
x-frame-options: DENY
X-XRDS-Location: http://openid.yandex.ru/server_xrds/
						</pre>
						</div>					
					</p>
					<li>Далее начинается самое интересное. Содержимое запрошенного документа блоками по протоколу сетевого уровня обрабатывается сетевыми средствами браузера.</li>
					<li>Графический движок получает данные, конвертированные на предыдущем этапе, в понятном ему виде.</li>
					<li>Парсинг HTML-кода и преобразование в DOM-дерево
						<ul>
							<li>В ходе лексического анализа символы html разбиваются на токены (открывающие и закрывающие тэги, названия и значения атрибутов). Алгоритм лексического анализа, реализованного в графических движках, представляет собой автомат с конечным числом состояний. Следующее состояние определяется на основе символов входной последовательности предыдущей итерации.</li>
							<li>При помощи синтаксического анализатора HTML весь plain-html преобразуется в DOM-дерево, представляющее собой структуры/экземпляры классов/стандартные типы компилируемых языков. Анализатор находит токен, передает конструктору дерева, переходит к следующему элементу.</li>
						</ul>
					</li>
					<li>На следующем этапе браузер помечает документ как интерактивный и начинает анализ отложенных скриптов, которые необходимо выполнить после завершения анализа документа. Состояние документа меняется на "готово", вызывается событие load.</li>		
					<li>Далее следует анализ css и javascript. Для них также используются предопределенные структуры модуле отображения (графический движок). В отличие от HTML, в CSS используется бесконтекстная грамматика, что позволяет, используя восходящий/нисходящий анализатор, формировать CSS-дерево объектов.</li>
					<li>При обнаружении &ltscript&gt синтаксический анализ документа откладывается до завершения выполнения скрипта. Для внешнего скрипта запрашиваются сетевые ресурсы. Все это происходит синхронно (в HTML 5 можно пометить скрипт как аснхронный для выполнения в другом потоке).</li>
					<li>Далее создается еще одна структура - дерево отображения. В нем визуальные элементы размещаются в том порядке, в каком их необходимо вывести на экран. Дерево отображения является проекцией DOM-дерева и служит для того, чтобы отрисовка содержания выполнялась в правильном порядке. Для построения дерева вычисляются таблицы стилей.</li>
					<li>Для расчета размера и положения объекта отображения при включении в дерево применяется ряд действий (компоновка).</li>
					<li>Далее следует этап рендеринга. Для каждого объекта отображения вызывается метод отрисовки, результат выводится на экран. Для отрисовки используется компонент инфраструктуры пользовательского интерфейса. Отрисовываться может как все дерево целиком, так и отдельные элементы.</li>
					<li>После загрузки и рендеринга страницы основной поток браузера переключается в цикл ожидания событий</li>
					<li>Ну вот, собственно, и все. Результат мы можем лицезреть на экране.</li>
				</ol>
			</div>
		</div>
		<div class="b-wrapper__blank"></div>

	</div>
	<div class="b-footer">
		<ul class="b-bottom_menu">
			<li class="b-bottom_menu__item"><a href="../../../site/sitemap.html">Карта сайта</a></li>
			<li class="b-bottom_menu__item"><a href="../../../author/author.html">Об авторе</a></li>
			<li class="b-bottom_menu__item"><a href="../../../author/contacts.html">Контакты</a></li>
		</ul>
	</div>
</body>
</html>
